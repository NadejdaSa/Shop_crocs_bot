import math
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from states.admin_states import AdminStates
from database.connection import Session
from database.models import Category, Product, Size
import keyboards.keyboards as kb
from filter.filter import IsAdmin
from aiogram.utils.keyboard import InlineKeyboardBuilder


admin_router = Router()
admin_router.message.filter(IsAdmin())
admin_router.callback_query.filter(IsAdmin())

ADMIN_PREFIXES = {"admin_",
                  "select_category_",
                  "delete_", "edit_",
                  "products_page_"}
PRODUCTS_PER_PAGE = 5


@admin_router.callback_query(F.data == "admin_cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=kb.admin_menu_keyboard()
    )
    await callback.answer()


@admin_router.message(CommandStart())
@admin_router.message(Command("admin"))
async def admin_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=kb.admin_menu_keyboard()
    )


@admin_router.callback_query(F.data == "admin_menu")
async def admin_menu(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=kb.admin_menu_keyboard()
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_add_category")
async def add_category_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_category_name)
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=kb.cancel_keyboard()
    )
    await callback.answer()


@admin_router.message(AdminStates.waiting_for_category_name)
async def add_category_finish(message: Message, state: FSMContext):
    category_name = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if category_name.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å']:
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=kb.admin_menu_keyboard()
        )
        return
    session = Session()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    existing_category = session.query(Category).filter_by(name=category_name).first()
    if existing_category:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        session.close()
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    new_category = Category(name=category_name)
    session.add(new_category)
    session.commit()
    session.close()

    await state.clear()
    await message.answer(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=kb.admin_menu_keyboard()
    )


@admin_router.callback_query(F.data == "admin_add_product")
async def add_product_start(callback: CallbackQuery, state: FSMContext):
    session = Session()
    categories = session.query(Category).all()
    session.close()

    if not categories:
        await callback.message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=kb.admin_menu_keyboard()
        )
        await callback.answer()
        return

    await state.set_state(AdminStates.waiting_for_product_name)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n"
                                  "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                                  reply_markup=kb.cancel_keyboard())
    await callback.answer()


@admin_router.message(AdminStates.waiting_for_product_name)
async def process_product_name(message: Message, state: FSMContext):
    await state.update_data(product_name=message.text)
    await state.set_state(AdminStates.waiting_for_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")


@admin_router.message(AdminStates.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await state.set_state(AdminStates.waiting_for_photo_url)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:\n\n"
                             "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                             reply_markup=kb.cancel_keyboard())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")


@admin_router.message(AdminStates.waiting_for_photo_url, F.photo)
async def process_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_url=photo_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    session = Session()
    categories = session.query(Category).all()
    session.close()

    builder = kb.InlineKeyboardBuilder()
    for category in categories:
        builder.button(
            text=category.name,
            callback_data=f"select_category_{category.id}"
        )
    builder.adjust(1)

    await state.set_state(AdminStates.waiting_for_category_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())


@admin_router.callback_query(F.data.startswith("select_category_"), AdminStates.waiting_for_category_id)
async def process_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[2])
    await state.update_data(category_id=category_id)
    await state.set_state(AdminStates.waiting_for_sizes)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 39, 40, 41):"
                                  "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                                  reply_markup=kb.cancel_keyboard())
    await callback.answer()


@admin_router.message(AdminStates.waiting_for_sizes)
async def process_sizes(message: Message, state: FSMContext):
    try:
        sizes_text = message.text.strip()
        sizes = [float(size.strip()) for size in sizes_text.split(",")]

        data = await state.get_data()

        session = Session()

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        product = Product(
            name=data['product_name'],
            price=data['price'],
            photo_url=data['photo_url'],
            category_id=data['category_id']
        )
        session.add(product)
        session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        for size_value in sizes:
            size = Size(size=size_value, product_id=product.id)
            session.add(size)

        session.commit()
        session.close()

        await state.clear()
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '{data['product_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=kb.admin_menu_keyboard()
        )

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")


@admin_router.callback_query(F.data == "admin_products")
async def show_products(callback: CallbackQuery, state: FSMContext):
    await show_products_page(callback, 1)
    await callback.answer()


@admin_router.callback_query(F.data.startswith("products_page_"))
async def show_products_page_handler(callback: CallbackQuery):
    page = int(callback.data.split("_")[2])
    await show_products_page(callback, page)
    await callback.answer()


async def show_products_page(callback: CallbackQuery, page: int):
    session = Session()
    total_products = session.query(Product).count()

    if total_products == 0:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç")
        session.close()
        return

    total_pages = math.ceil(total_products / PRODUCTS_PER_PAGE)
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages

    offset = (page - 1) * PRODUCTS_PER_PAGE
    products = session.query(Product).offset(offset).limit(PRODUCTS_PER_PAGE).all()
    text = f"üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"

    for i, product in enumerate(products, start=offset + 1):
        sizes = [str(size.size) for size in product.sizes]
        text += f"#{i}\n"
        text += f"üëü –ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
        text += f"üíµ –¶–µ–Ω–∞: {product.price} —Ä—É–±\n"
        text += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category.name}\n"
        text += f"üìè –†–∞–∑–º–µ—Ä—ã: {', '.join(sizes)}\n"
        text += f"üÜî ID: {product.id}\n"
        text += "‚îÄ" * 30 + "\n\n"

    session.close()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    builder = InlineKeyboardBuilder()
    if page > 1:
        builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                       callback_data=f"products_page_{page - 1}")
    if page < total_pages:
        builder.button(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
                       callback_data=f"products_page_{page + 1}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="admin_menu")
    builder.adjust(2, 1)

    if hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(text,
                                         reply_markup=builder.as_markup())
    else:
        await callback.message.answer(text, reply_markup=builder.as_markup())


@admin_router.callback_query(F.data == "admin_delete_category")
async def delete_category_start(callback: CallbackQuery, state: FSMContext):
    session = Session()
    categories = session.query(Category).all()
    session.close()

    if not categories:
        await callback.message.answer(
            "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç",
            reply_markup=kb.admin_menu_keyboard()
        )
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.button(
            text=f"üóë {category.name}",
            callback_data=f"delete_category_{category.id}"
        )
    builder.adjust(1)

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("delete_category_"))
async def delete_category_confirm(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[2])

    session = Session()
    category = session.query(Category).get(category_id)

    if not category:
        await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        session.close()
        await callback.answer()
        return

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    for product in category.products:
        for size in product.sizes:
            session.delete(size)
        session.delete(product)

    session.delete(category)
    session.commit()
    session.close()

    await callback.message.answer(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' –∏ –µ—ë —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã",
        reply_markup=kb.admin_menu_keyboard()
    )
    await callback.answer()
