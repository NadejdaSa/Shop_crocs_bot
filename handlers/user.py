from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, ContentType
from aiogram.fsm.context import FSMContext
from database.connection import Session
from database.models import Category, Product, CartItem, User, Size
import keyboards.keyboards as kb
from aiogram.filters import CommandStart, Command
import logging
from states.user_states import UserStates
from filter.filter import IsUser
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

user_router = Router()
user_router.message.filter(IsUser())
user_router.callback_query.filter(IsUser())
logger = logging.getLogger(__name__)

USER_PREFIXES = {"category_", "product_", "add_to_cart_", "back_to_", "cart"}
PROVIDER_TOKEN = "381764678:TEST:143408"


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@user_router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(UserStates.choosing_category)
    session = Session()
    user = session.query(User).filter(
        User.tg_id == message.from_user.id).first()
    if not user:
        user = User(tg_id=message.from_user.id)
        session.add(user)
        session.commit()
    session.close()

    await message.answer("üëü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∫—Ä–æ—Å—Å–æ–≤–æ–∫!",
                         reply_markup=kb.main_menu_user())


# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
@user_router.callback_query(F.data == "show_categories")
async def show_categories(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.choosing_category)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=kb.show_categories()
    )
    await callback.answer()


@user_router.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])

    session = Session()
    category = session.query(Category).get(category_id)
    products = session.query(Product).filter_by(category_id=category_id).all()
    session.close()

    if not products:
        await callback.message.edit_text(
            f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=kb.main_menu_user()
        )
        await callback.answer()
        return

    await state.set_state(UserStates.choosing_product)
    await state.update_data(category_id=category_id)

    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=kb.products_menu(products)
    )
    await callback.answer()


@user_router.callback_query(F.data == "go_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.choosing_category)
    await callback.message.edit_text(
        "üëü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=kb.main_menu_user()
    )
    await callback.answer()


@user_router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])

    session = Session()
    product = session.query(Product).get(product_id)
    sizes = [str(size.size) for size in product.sizes]
    session.close()

    await state.set_state(UserStates.choosing_size)
    await state.update_data(product_id=product_id)

    text = (
        f"üëü {product.name}\n"
        f"üíµ –¶–µ–Ω–∞: {product.price} —Ä—É–±\n"
        f"üìè –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {', '.join(sizes)}"
    )

    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await callback.message.answer_photo(
        photo=product.photo_url,
        caption=text,
        reply_markup=kb.product_detail_menu(product.id, sizes)
    )
    await callback.answer()


@user_router.callback_query(F.data == "back_to_category_list")
async def back_to_category_list(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.choosing_category)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=kb.show_categories()
    )
    await callback.answer()


@user_router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category_id = data.get("category_id")
    if not category_id:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤ state ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(
            "üëü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=kb.main_menu_user()
        )
        await callback.answer()
        return

    session = Session()
    category = session.query(Category).get(category_id)
    products = session.query(Product).filter_by(category_id=category_id).all()
    session.close()

    await state.set_state(UserStates.choosing_product)
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=kb.products_menu(products)
    )
    await callback.answer()


@user_router.callback_query(F.data == "back_to_products")
async def back_to_products(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category_id = data.get("category_id")

    session = Session()
    category = session.query(Category).get(category_id)
    products = session.query(Product).filter_by(category_id=category_id).all()
    session.close()

    await state.set_state(UserStates.choosing_product)

    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=kb.products_menu(products)
    )
    await callback.answer()


@user_router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        parts = callback.data.split("_")
        print(f"Debug: callback data = {callback.data}")
        print(f"Debug: parts = {parts}")

        if len(parts) >= 5:
            product_id = int(parts[3])
            size = float(parts[4])
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞")
            return

        print(f"Debug: product_id = {product_id}, size = {size}")

        session = Session()

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(
            tg_id=callback.from_user.id).first()
        if not user:
            user = User(tg_id=callback.from_user.id)
            session.add(user)
            session.commit()
            session.refresh(user)

        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä –∏ —Ç–æ–≤–∞—Ä –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
        size_obj = session.query(Size).filter_by(
            product_id=product_id, size=size).first()
        if not size_obj:
            await callback.answer("‚ùå –†–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            session.close()
            return

        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –¢–û–ô –ñ–ï —Å–µ—Å—Å–∏–∏
        product = session.query(Product).get(product_id)
        product_name = product.name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart_item = session.query(CartItem).filter_by(
            user_id=user.id,
            product_id=product_id,
            size_id=size_obj.id
        ).first()

        if cart_item:
            cart_item.quantity += 1
            quantity = cart_item.quantity
        else:
            cart_item = CartItem(
                user_id=user.id,
                product_id=product_id,
                size_id=size_obj.id,
                quantity=1
            )
            session.add(cart_item)
            quantity = 1

        session.commit()
        session.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –≤–º–µ—Å—Ç–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await callback.message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' (—Ä–∞–∑–º–µ—Ä {size}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n"
            f"üì¶ –í—Å–µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {quantity} —à—Ç\n\n"
            f"üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É: /show_cart"
        )

        # –í—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º answer —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await callback.answer()

    except Exception as e:
        print(f"Error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")


# –ö–æ—Ä–∑–∏–Ω–∞
async def render_cart_overview(user_id: int,
                               chat_obj: Message | CallbackQuery,
                               is_callback: bool = False):
    session = Session()
    try:
        user = session.query(User).filter_by(tg_id=user_id).first()

        if not user or not user.cart_items:
            text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
            markup = kb.main_menu_user()
        else:
            cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
            builder = InlineKeyboardBuilder()

            for item in user.cart_items:
                cart_text += f"üëü {item.product.name} ({item.size.size}) x{item.quantity}\n"
                builder.button(
                    text=f"{item.product.name} ({item.size.size})",
                    callback_data=f"edit_item_{item.id}"
                )

            builder.button(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
                           callback_data="clear_cart")
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")
            builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="pay")
            builder.adjust(1)
            markup = builder.as_markup()
            text = cart_text

        if is_callback:
            try:
                await chat_obj.message.edit_text(text, reply_markup=markup)
            except TelegramBadRequest:
                try:
                    await chat_obj.message.edit_reply_markup(
                        reply_markup=markup)
                except TelegramBadRequest:
                    pass
        else:
            await chat_obj.answer(text, reply_markup=markup)

    finally:
        session.close()


async def render_cart_item(item_id: int, chat_obj: Message | CallbackQuery):
    session = Session()
    try:
        item = session.query(CartItem).get(item_id)
        if not item:
            await chat_obj.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        text = (
            f"üëü {item.product.name}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {item.size.size}\n"
            f"üíµ –¶–µ–Ω–∞: {item.product.price} —Ä—É–±\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}"
        )

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚ûñ",
                                 callback_data=f"decrease_item_{item.id}"),
            InlineKeyboardButton(text=f"{item.quantity}",
                                 callback_data="noop"),
            InlineKeyboardButton(text="‚ûï",
                                 callback_data=f"increase_item_{item.id}")
        )
        builder.row(
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å",
                                 callback_data=f"remove_item_{item.id}"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_cart")
        )
        builder.adjust(2)
        markup = builder.as_markup()

        try:
            await chat_obj.message.edit_text(text, reply_markup=markup)
        except TelegramBadRequest:
            await chat_obj.message.answer(text, reply_markup=markup)

    finally:
        session.close()


@user_router.callback_query(F.data == "show_cart")
async def show_cart_overview_callback(callback: CallbackQuery):
    await render_cart_overview(callback.from_user.id,
                               callback,
                               is_callback=True)
    await callback.answer()


@user_router.message(Command("show_cart"))
async def show_cart_command(message: Message):
    await render_cart_overview(message.from_user.id,
                               message,
                               is_callback=False)


@user_router.callback_query(F.data.startswith("edit_item_"))
async def edit_cart_item(callback: CallbackQuery):
    item_id = int(callback.data.split("_")[2])
    await render_cart_item(item_id, callback)
    await callback.answer()


@user_router.callback_query(F.data == "clear_cart")
async def clear_cart_callback(callback: CallbackQuery):
    session = Session()
    try:
        user = session.query(User).filter_by(
            tg_id=callback.from_user.id).first()
        if user:
            deleted_count = session.query(CartItem).filter_by(
                user_id=user.id).delete()
            session.commit()
            await callback.answer(
                f"‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ ({deleted_count} —Ç–æ–≤–∞—Ä–æ–≤ —É–¥–∞–ª–µ–Ω–æ)")
        else:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        await render_cart_overview(callback.from_user.id,
                                   callback,
                                   is_callback=True)

    except Exception as e:
        session.rollback()
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()


@user_router.callback_query(F.data.startswith("increase_item_"))
async def increase_item(callback: CallbackQuery):
    item_id = int(callback.data.split("_")[2])
    session = Session()
    try:
        item = session.query(CartItem).get(item_id)
        if item:
            item.quantity += 1
            session.commit()
            await render_cart_item(item_id, callback)
        await callback.answer()
    finally:
        session.close()


@user_router.callback_query(F.data.startswith("decrease_item_"))
async def decrease_item(callback: CallbackQuery):
    item_id = int(callback.data.split("_")[2])
    session = Session()
    try:
        item = session.query(CartItem).get(item_id)
        if item:
            if item.quantity > 1:
                item.quantity -= 1
                session.commit()
                await render_cart_item(item_id, callback)
            else:
                # –ï—Å–ª–∏ 1 ‚Äî —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
                session.delete(item)
                session.commit()
                await render_cart_overview(callback.from_user.id,
                                           callback,
                                           is_callback=True)
        await callback.answer()
    finally:
        session.close()


@user_router.callback_query(F.data.startswith("remove_item_"))
async def remove_item(callback: CallbackQuery):
    item_id = int(callback.data.split("_")[2])
    session = Session()
    try:
        item = session.query(CartItem).get(item_id)
        if item:
            session.delete(item)
            session.commit()
            await render_cart_overview(callback.from_user.id,
                                       callback,
                                       is_callback=True)
        await callback.answer()
    finally:
        session.close()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—á–µ—Ç–∞
@user_router.callback_query(F.data == "pay")
async def pay_callback(callback: CallbackQuery):
    session = Session()
    try:
        user = session.query(User).filter_by(
            tg_id=callback.from_user.id).first()
        if not user or not user.cart_items:
            await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        prices = []
        total_amount = 0

        for item in user.cart_items:
            amount = int(item.product.price * 100)
            prices.append(LabeledPrice(
                label=f"{item.product.name} ({item.size.size}) x{item.quantity}",
                amount=amount * item.quantity
            ))
            total_amount += item.product.price * item.quantity

        await callback.message.answer_invoice(
            title="üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
            description=f"–ó–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {total_amount} —Ä—É–±.",
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="order",
            payload=f"order_user_{user.id}"
        )
        await callback.answer()
    finally:
        session.close()


@user_router.pre_checkout_query()
async def pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@user_router.message(F.successful_payment)
async def successful_payment(message: Message):
    print("=== SUCCESSFUL PAYMENT HANDLER TRIGGERED ===")  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    payment_info = message.successful_payment

    session = Session()
    try:
        user = session.query(User).filter_by(
            tg_id=message.from_user.id
        ).first()
        if user:
            session.query(CartItem).filter_by(user_id=user.id).delete()
            session.commit()
    finally:
        session.close()

    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n"
        f"–î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:\n"
        f"–°—É–º–º–∞: {payment_info.total_amount / 100} {payment_info.currency}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {payment_info.invoice_payload}"
    )
    await render_cart_overview(message.from_user.id, message, is_callback=False)
