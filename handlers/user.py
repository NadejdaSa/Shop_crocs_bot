from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from database.connection import Session
from database.models import Category, Product, CartItem, User, Size
import keyboards.keyboards as kb
from aiogram.filters import CommandStart, Command
import logging
from states.user_states import UserStates
from filter.filter import IsUser
from aiogram.utils.keyboard import InlineKeyboardBuilder

user_router = Router()
user_router.message.filter(IsUser())
user_router.callback_query.filter(IsUser())
logger = logging.getLogger(__name__)

USER_PREFIXES = {"category_", "product_", "add_to_cart_", "back_to_", "cart"}


@user_router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(UserStates.choosing_category)
    session = Session()
    user = session.query(User).filter(User.tg_id == message.from_user.id).first()
    if not user:
        user = User(tg_id=message.from_user.id)
        session.add(user)
        session.commit()
    session.close()

    await message.answer("üëü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∫—Ä–æ—Å—Å–æ–≤–æ–∫!\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                         reply_markup=kb.main_menu_user())


async def render_cart(user_id: int, chat_obj: Message | CallbackQuery,
                      is_callback: bool = False):
    session = Session()
    try:
        user = session.query(User).filter_by(tg_id=user_id).first()

        if not user or not user.cart_items:
            text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
            markup = kb.main_menu_user()
        else:
            total = 0
            cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"

            for item in user.cart_items:
                item_total = item.product.price * item.quantity
                total += item_total
                cart_text += f"üëü {item.product.name}\n"
                cart_text += f"üìè –†–∞–∑–º–µ—Ä: {item.size.size}\n"
                cart_text += f"üí∞ –¶–µ–Ω–∞: {item.product.price} —Ä—É–± x {item.quantity} = {item_total} —Ä—É–±\n\n"

            cart_text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total} —Ä—É–±"

            builder = InlineKeyboardBuilder()
            builder.button(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
                           callback_data="clear_cart")
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")
            builder.adjust(1)
            markup = builder.as_markup()
            text = cart_text

        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å –∫–Ω–æ–ø–∫–∏ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π ‚Äî –æ—Ç–≤–µ—á–∞–µ–º
        if is_callback:
            try:
                await chat_obj.message.edit_text(text, reply_markup=markup)
            except TelegramBadRequest:
                try:
                    await chat_obj.message.edit_reply_markup(reply_markup=markup)
                except TelegramBadRequest:
                    pass
        else:
            await chat_obj.answer(text, reply_markup=markup)

    finally:
        session.close()


@user_router.callback_query(F.data == "show_cart")
async def show_cart_callback(callback: CallbackQuery):
    await render_cart(callback.from_user.id, callback, is_callback=True)
    await callback.answer()


@user_router.message(Command("show_cart"))
async def show_cart_command(message: Message):
    await render_cart(message.from_user.id, message, is_callback=False)



@user_router.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    
    session = Session()
    category = session.query(Category).get(category_id)
    products = session.query(Product).filter_by(category_id=category_id).all()
    session.close()
    
    if not products:
        await callback.message.edit_text(
            f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=kb.main_menu_user()
        )
        await callback.answer()
        return
    
    await state.set_state(UserStates.choosing_product)
    await state.update_data(category_id=category_id)
    
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=kb.products_menu(products)
    )
    await callback.answer()


@user_router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.choosing_category)
    await callback.message.edit_text(
        "üëü –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=kb.main_menu_user()
    )
    await callback.answer()


@user_router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    
    session = Session()
    product = session.query(Product).get(product_id)
    sizes = [str(size.size) for size in product.sizes]
    session.close()
    
    await state.set_state(UserStates.choosing_size)
    await state.update_data(product_id=product_id)
    
    text = (
        f"üëü {product.name}\n"
        f"üíµ –¶–µ–Ω–∞: {product.price} —Ä—É–±\n"
        f"üìè –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {', '.join(sizes)}"
    )

    try:
        await callback.message.delete()
    except:
        pass  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    
    await callback.message.answer_photo(
        photo=product.photo_url,
        caption=text,
        reply_markup=kb.product_detail_menu(product.id, sizes)
    )
    await callback.answer()


@user_router.callback_query(F.data == "back_to_products")
async def back_to_products(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category_id = data.get("category_id")
    
    session = Session()
    category = session.query(Category).get(category_id)
    products = session.query(Product).filter_by(category_id=category_id).all()
    session.close()
    
    await state.set_state(UserStates.choosing_product)
    
    try:
        await callback.message.delete()
    except:
        pass  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=kb.products_menu(products)
    )
    await callback.answer()


@user_router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        parts = callback.data.split("_")
        print(f"Debug: callback data = {callback.data}")
        print(f"Debug: parts = {parts}")
        
        if len(parts) >= 5:
            product_id = int(parts[3])
            size = float(parts[4])
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞")
            return
        
        print(f"Debug: product_id = {product_id}, size = {size}")
        
        session = Session()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(tg_id=callback.from_user.id).first()
        if not user:
            user = User(tg_id=callback.from_user.id)
            session.add(user)
            session.commit()
            session.refresh(user)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä –∏ —Ç–æ–≤–∞—Ä –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
        size_obj = session.query(Size).filter_by(product_id=product_id, size=size).first()
        if not size_obj:
            await callback.answer("‚ùå –†–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            session.close()
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –¢–û–ô –ñ–ï —Å–µ—Å—Å–∏–∏
        product = session.query(Product).get(product_id)
        product_name = product.name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart_item = session.query(CartItem).filter_by(
            user_id=user.id,
            product_id=product_id,
            size_id=size_obj.id
        ).first()
        
        if cart_item:
            cart_item.quantity += 1
            quantity = cart_item.quantity
        else:
            cart_item = CartItem(
                user_id=user.id,
                product_id=product_id,
                size_id=size_obj.id,
                quantity=1
            )
            session.add(cart_item)
            quantity = 1
        
        session.commit()
        session.close()  # –¢–µ–ø–µ—Ä—å —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –≤–º–µ—Å—Ç–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await callback.message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' (—Ä–∞–∑–º–µ—Ä {size}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n"
            f"üì¶ –í—Å–µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {quantity} —à—Ç\n\n"
            f"üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É: /show_cart"
        )
        
        # –í—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º answer —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await callback.answer()
        
    except Exception as e:
        print(f"Error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")


@user_router.callback_query(F.data == "clear_cart")
async def clear_cart_callback(callback: CallbackQuery):
    session = Session()
    try:
        user = session.query(User).filter_by(tg_id=callback.from_user.id).first()
        if user:
            deleted_count = session.query(CartItem).filter_by(user_id=user.id).delete()
            session.commit()
            await callback.answer(f"‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ ({deleted_count} —Ç–æ–≤–∞—Ä–æ–≤ —É–¥–∞–ª–µ–Ω–æ)")
        else:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        await render_cart(callback.from_user.id, callback, is_callback=True)

    except Exception as e:
        session.rollback()
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()
